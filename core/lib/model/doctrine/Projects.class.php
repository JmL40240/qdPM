<?php

/**
 * Projects
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Projects extends BaseProjects
{

  public static function getTeamUsersByAccess($project_id, $access)
  {    
    $list = array();
    if($project = Doctrine_Core::getTable('Projects')->find($project_id))
    {
      foreach(explode(',',$project->getTeam()) as $users_id)
      {
        
        if($user = Doctrine_Core::getTable('Users')->find($users_id))
        {
          switch($access)
          {
            case 'tasks':
                if($user->getUsersGroups()->getAllowManageTasks()!='')
                {
                  $list[] = $users_id;
                }
              break;
            case 'tickets':
                if($user->getUsersGroups()->getAllowManageTickets()!='')
                {
                  $list[] = $users_id;
                }
              break;
            case 'discussions':
                if($user->getUsersGroups()->getAllowManageDiscussions()!='')
                {
                  $list[] = $users_id;
                }
              break;
          }
          
        }
      }
    }
    
    return $list;
  }

  public static function getChoices($model,$sf_user)
  {
    $q = Doctrine_Core::getTable('Projects')->createQuery('p')
          ->leftJoin('p.ProjectsPriority pp')
          ->leftJoin('p.ProjectsStatus ps')
          ->leftJoin('p.ProjectsTypes pt')
          ->leftJoin('p.ProjectsGroups pg')
          ->leftJoin('p.Users')
          ->addWhere('in_trash is null');
          
    if(Users::hasAccess('view_own','projects',$sf_user))
    {       
      $q->addWhere("find_in_set('" . $sf_user->getAttribute('id') . "',p.team) or p.created_by='" . $sf_user->getAttribute('id') . "'");
    }
    
    switch($model)
    {
      case 'tasks':
          if(count($list = ProjectsRoles::getNotAllowedProjectsByModule('tasks',$sf_user->getAttribute('id')))>0)
          {
            $q->whereNotIn('p.id',$list);
          }
        break;
      case 'tickets':
          if(count($list = ProjectsRoles::getNotAllowedProjectsByModule('tickets',$sf_user->getAttribute('id')))>0)
          {            
            $q->whereNotIn('p.id',$list);
          }
        break;
      case 'discussions':
          if(count($list = ProjectsRoles::getNotAllowedProjectsByModule('discussions',$sf_user->getAttribute('id')))>0)
          {
            $q->whereNotIn('p.id',$list);
          }
        break;                          
    }
    
    if(count($closed = app::getStatusByGroup('closed','ProjectsStatus'))>0)
    {
      $q->whereNotIn('p.projects_status_id',$closed);
    }
    
    $choices = array(''=>'');
    foreach($q->orderBy('p.name')->fetchArray() as $p)
    {
      $choices[$p['id']] = $p['name'];
    }
    
    return $choices;
  }
  
  
  public static function hasViewOwnAccess($sf_user,$project)
  {
    if(Users::hasAccess('view_own','projects',$sf_user))
    {      
      if(!in_array($sf_user->getAttribute('id'),explode(',',$project->getTeam())) and $project->getCreatedBy()!=$sf_user->getAttribute('id'))
      {
        return false;
      }
      else
      {
        return true;
      }
    }
    else
    {
      return true;
    }
  }
  
  public static function checkViewOwnAccess($c,$sf_user,$project)
  {
    if(Users::hasAccess('view_own','projects',$sf_user))
    {      
      if(!in_array($sf_user->getAttribute('id'),explode(',',$project->getTeam())) and $project->getCreatedBy()!=$sf_user->getAttribute('id'))
      {
        $c->redirect('accessForbidden/index');
      }
    }
  }
  
  public static function sendNotification($c,$projects,$send_to,$sf_user)
  {
    foreach($send_to as $type=>$users)
    {
      switch($type)
      {
        case 'status': $subject = t::__('Project Status Updated');
          break;
        default: $subject = t::__('New Project');
          break;
      }
      
      $to = array();
      foreach($users as $v)
      {
        if($u = Doctrine_Core::getTable('Users')->find($v))
        {
          $to[$u->getEmail()]=$u->getName();
        }
      }
    
            
      $user = $sf_user->getAttribute('user');
      $from[$user->getEmail()] = $user->getName();
      $to[$projects->getUsers()->getEmail()] = $projects->getUsers()->getName();
      $to[$user->getEmail()] = $user->getName();
      
      if(sfConfig::get('app_send_email_to_owner')=='off')
      {
        unset($to[$user->getEmail()]);             
      }
    
       
      $subject .= ': ' . $projects->getName() . ($projects->getProjectsStatusId()>0 ? ' [' . $projects->getProjectsStatus()->getName() . ']':'');
      $body  = $c->getComponent('projects','emailBody',array('projects'=>$projects));
                                   
      Users::sendEmail($from,$to,$subject,$body,$sf_user);
    }                
  }
    
  public static function addFiltersToQuery($q,$filters)
  {
    $count_e = 0;
    
    foreach($filters as $table=>$fstr)
    {
      $ids = explode(',',$fstr);
      
      switch($table)
      {
        case 'ProjectsPriority':
            $q->whereIn('p.projects_priority_id',$ids);
          break;
        case 'ProjectsStatus':
            $q->whereIn('p.projects_status_id',$ids);
          break;
        case 'ProjectsTypes':
            $q->whereIn('p.projects_types_id',$ids);
          break;
        case 'ProjectsGroups':
            $q->whereIn('p.projects_groups_id',$ids);
          break;
        case 'Users':
            $filter_sql_array = array();
            foreach($ids as $id)
            {
              $filter_sql_array[] = 'find_in_set(' . $id . ',p.team)';
            }
            
            $q->addWhere(implode(' or ',$filter_sql_array));
          break;
      }
      
      if(strstr($table,'extraField'))
      {
        $efId = str_replace('extraField','',$table);
        
        $filter_sql_array = array();
        foreach($ids as $id)
        {
          $filter_sql_array[] = 'find_in_set("' . $id . '",REPLACE(e' . ($count_e>0?$count_e:''). '.value,"\n",","))';
        }
                
        $sql = '(SELECT COUNT(*) FROM ExtraFieldsList efl' . $efId . ' WHERE  (' . implode(' OR ',$filter_sql_array) . ') AND efl' . $efId . '.bind_id=p.id AND efl' . $efId . '.extra_fields_id="' . $efId . '")>0';
                        
        $q->addWhere($sql);
        
        if($count_e==0)
        {
          $count_e=2;
        }
        else
        {
          $count_e++;
        }        
      }
    }
          
    return $q;  
  }
  
  public static function saveProjectsFilter($request, $filters,$sf_user,$report_type = 'filter')
  {    
    if($request->getParameter('update_user_filter')>0)
    {            
      $r = Doctrine_Core::getTable('ProjectsReports')->createQuery()
            ->addWhere('id=?',$request->getParameter('update_user_filter'))
            ->addWhere('users_id=?',$sf_user->getAttribute('id'))
            ->addWhere('report_type=?',$report_type)
            ->fetchOne();
            
      if($r)
      {
        $r->setName($request->getParameter('name'));  
        $r->setIsDefault($request->getParameter('is_default'));
      }
      else
      {
        return false;
      }
    }
    else
    {    
      $r = new ProjectsReports();
      $r->setName($request->getParameter('name'));
      $r->setUsersId($sf_user->getAttribute('id'));
      $r->setReportType($report_type);
      $r->setIsDefault($request->getParameter('is_default'));
    }
    
    if(!$request->hasParameter('update_user_filter') or ($request->hasParameter('update_user_filter') and $request->hasParameter('update_values')))
    {
      foreach($filters as $table=>$fstr)
      {            
        switch($table)
        {
          case 'ProjectsPriority':
              $r->setProjectsPriorityId($fstr);            
            break;
          case 'ProjectsStatus':
              $r->setProjectsStatusId($fstr);            
            break;
          case 'ProjectsTypes':
              $r->setProjectsTypeId($fstr);            
            break;
          case 'ProjectsGroups':
              $r->setProjectsGroupsId($fstr);            
            break;
          case 'Users':
              $r->setInTeam($fstr);            
            break;
        }
      }
    }
          
    $r->save();
    
    if($r->getIsDefault()==1)
    {
      Doctrine_Query::create()
      ->update('ProjectsReports')
      ->set('is_default', 0)
      ->addWhere('id != ?', $r->getId())
      ->addWhere('report_type=?',$report_type)
      ->execute();
    }  
  }
  
  public static function useProjectsFilter($id,$sf_user,$report_type='filter')
  {
    $f = array();
    
    $r = Doctrine_Core::getTable('ProjectsReports')
                ->createQuery()
                ->addWhere('id=?',$id)
                ->addWhere('report_type=?',$report_type)
                ->addWhere('users_id=?',$sf_user->getAttribute('id'))
                ->fetchOne();
    
    if(strlen($r->getProjectsPriorityId())>0)
    {
      $f['ProjectsPriority'] = $r->getProjectsPriorityId(); 
    }
    
    if(strlen($r->getProjectsStatusId())>0)
    {
      $f['ProjectsStatus'] = $r->getProjectsStatusId(); 
    }
                
    if(strlen($r->getProjectsTypeId())>0)
    {
      $f['ProjectsTypes'] = $r->getProjectsTypeId(); 
    }
    
    if(strlen($r->getProjectsGroupsId())>0)
    {
      $f['ProjectsGroups'] = $r->getProjectsGroupsId(); 
    }
    
    if(strlen($r->getInTeam())>0)
    {
      $f['Users'] = $r->getInTeam(); 
    }
    
    return $f;
  }
  
  public static function getDefaultFilter($sf_user,$report_type = 'filter')
  {
    $r = Doctrine_Core::getTable('ProjectsReports')
                ->createQuery()
                ->addWhere('is_default=?',1)
                ->addWhere('report_type=?',$report_type)
                ->addWhere('users_id=?',$sf_user->getAttribute('id'))
                ->fetchOne();
    if($r)
    {
      return Projects::useProjectsFilter($r->getId(),$sf_user);
    }
    else
    {
      $f = array();
      
      if(count($s=app::getStatusByGroup('open','ProjectsStatus'))>0)
      {
        $f['ProjectsStatus'] = implode(',',$s);
      }
      
      return $f;
    }
  }
  
  public static function  getListingOrderByType($q,$type)
  {
   switch($type)
   {
     case 'date_added':           $q->orderBy('p.created_at desc');
       break;
     case 'date_last_commented':  $q->orderBy('p.last_comment_date desc');
       break;
     case 'name':                 $q->orderBy('LTRIM(p.name)');
       break;
     case 'priority':             $q->orderBy('pp.sort_order,LTRIM(pp.name), LTRIM(p.name)');
       break;
     case 'status':               $q->orderBy('ps.status_group desc, ps.sort_order,LTRIM(ps.name), LTRIM(p.name)');
       break;
     case 'type':                 $q->orderBy('pt.sort_order,LTRIM(pt.name), LTRIM(p.name)');
       break;
     case 'group':                $q->orderBy('pg.sort_order,LTRIM(pg.name), LTRIM(p.name)');
       break;
     default:                     $q->orderBy('ps.status_group desc, ps.sort_order,LTRIM(ps.name), LTRIM(p.name)');
      break;            
   }           
   
   return $q;
  }      
}