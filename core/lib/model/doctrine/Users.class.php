<?php

/**
 * Users
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Users extends BaseUsers
{
  public static function countRelatedItemsByUsersId($id)
  {
    $count = 0;
    
    $count += Doctrine_Core::getTable('Projects')->createQuery()->addWhere('created_by=?',$id)->count();
    $count += Doctrine_Core::getTable('ProjectsComments')->createQuery()->addWhere('created_by=?',$id)->count();
    $count += Doctrine_Core::getTable('Tasks')->createQuery()->addWhere('created_by=?',$id)->count();
    $count += Doctrine_Core::getTable('TasksComments')->createQuery()->addWhere('created_by=?',$id)->count();
    $count += Doctrine_Core::getTable('Tickets')->createQuery()->addWhere('users_id=?',$id)->count();
    $count += Doctrine_Core::getTable('TicketsComments')->createQuery()->addWhere('users_id=?',$id)->count();
    $count += Doctrine_Core::getTable('Discussions')->createQuery()->addWhere('users_id=?',$id)->count();
    $count += Doctrine_Core::getTable('DiscussionsComments')->createQuery()->addWhere('users_id=?',$id)->count();
    
    return $count;
  }

  public static function addFiltersToQuery($q,$filters)
  {    
    $count_e = 0;
    
    foreach($filters as $table=>$fstr)
    {
      $ids = explode(',',$fstr);
      
      switch($table)
      {
        case 'UsersGroups':
            $q->whereIn('u.users_group_id',$ids);
          break;      
      }
      
      if(strstr($table,'extraField'))
      {
        $efId = str_replace('extraField','',$table);
        
        $filter_sql_array = array();
        foreach($ids as $id)
        {
          $filter_sql_array[] = 'find_in_set("' . $id . '",REPLACE(e' . ($count_e>0?$count_e:''). '.value,"\n",","))';
        }
                
        $sql = '(SELECT COUNT(*) FROM ExtraFieldsList efl' . $efId . ' WHERE  (' . implode(' OR ',$filter_sql_array) . ') AND efl' . $efId . '.bind_id=u.id AND efl' . $efId . '.extra_fields_id="' . $efId . '")>0';
                        
        $q->addWhere($sql);
        
        if($count_e==0)
        {
          $count_e=2;
        }
        else
        {
          $count_e++;
        }        
      }
    }
          
    return $q;  
  }
  
  public static function getHiddenReports($id)
  {
    if($u = Doctrine_Core::getTable('Users')->find($id))
    {
      return explode(',',$u->getHiddenCommonReports()); 
    }
    else
    {
      return array();
    }
  }
  
  
  public static function getNameById($id,$separator='<br>',$schema=false)
  {
    $l = array();
                
    foreach(explode(',',$id) as $v)
    {
      if($schema)
      {
        if(isset($schema[$v]))
        {
          $l[] = $schema[$v];
        }
      }
      elseif($u = Doctrine_Core::getTable('Users')->find($v))
      {
        $l[] = $u->getName();
      }
    }
    
    return implode($separator,$l);
  }
  
  public static function getSchema()
  {
    $users =  Doctrine_Core::getTable('Users')->createQuery('u')
        //->addWhere('u.active=1')
        ->orderBy('u.name')
        ->fetchArray();
        
    $schema = array();
    foreach($users as $u)
    {
      $schema[$u['id']] = $u['name'];
    }
    
    return $schema;
  }
  
  public static function getEmailChoicesByGroupId($id)
  {
    $users_list = Doctrine_Core::getTable('Users')->createQuery('u')
        ->addWhere('u.active=1')
        ->addWhere('u.users_group_id=?',$id)
        ->orderBy('u.name')->fetchArray();
    
    $choices = array();
    foreach($users_list as $u)
    {
      $choices[$u['email']] = $u['name'];
    }
    
    return $choices;
  }
    
  public static function getChoices($include = array(),$has_access = '', $add_empty = false,$projects_id = false)
  {
    $q = Doctrine_Core::getTable('Users')->createQuery('u')->leftJoin('u.UsersGroups ug')
        ->addWhere('u.active=1')
        ->orderBy('ug.name, u.name');
    
    if(count($include)>0)
    {
      $q->whereIn('u.id',$include);
    } 
    
    $roles_sql = '';
    
    if(strlen($has_access) and $projects_id>0)
    {
      $q->leftJoin('u.ProjectsRoles pr');
      
      if(count($r = ProjectsRoles::getIdListByAccess($has_access))>0)
      {
        $roles_sql = ' or (pr.users_groups_id in (' . implode(',',$r). ') and pr.projects_id="' . $projects_id .  '")';
      }
    }
          
    switch($has_access)
    {
      case 'tasks': 
          $q->addWhere('length(ug.allow_manage_tasks)>0' . $roles_sql);        
        break;
      case 'tasks_insert': 
          $q->addWhere("ug.allow_manage_tasks in ('full_access','manage_own_lnly') or (ug.allow_manage_tasks='custom' and find_in_set('create',tasks_custom_access)) " . $roles_sql);
        break;
      case 'tasks_comments_insert': 
          $q->addWhere("ug.tasks_comments_access in ('full_access','manage_own_lnly','insert_only')" . $roles_sql);
        break;       
      case 'tickets': 
          $q->addWhere('length(ug.allow_manage_tickets)>0' . $roles_sql);
        break;
      case 'tickets_insert': 
          $q->addWhere("ug.allow_manage_tickets in ('full_access','manage_own_lnly') or (ug.allow_manage_tickets='custom' and find_in_set('create',tickets_custom_access)) ". $roles_sql);
        break;
      case 'discussions':           
          $q->addWhere('length(ug.allow_manage_discussions)>0' . $roles_sql);      
        break;
      case 'discussions_insert': 
          $q->addWhere("ug.allow_manage_discussions in ('full_access','manage_own_lnly') or (ug.allow_manage_discussions='custom' and find_in_set('create',discussions_custom_access)) " . $roles_sql);
        break;
    }   
    
    $l = $q->fetchArray();
    $choices = array();
    
    if($add_empty) $choices[''] = '';
        
    foreach($l as $v)
    {       
      $choices[$v['UsersGroups']['name']][$v['id']]=$v['name'];
    }
    
    return $choices;
  }
  
  public static function getRandomPassword($passwordLength = 7)
  {
    $passwordChars = "abcdefghijkmnopqrstuvwxyz023456789ABCDEFGHIJKMNOPQRSTUVWXYZ";

    $password = '' ;
    
    for($i=0; $i<$passwordLength; $i++)
    {
        $password .= $passwordChars[rand(0,58)];
    }
    
    return $password;
  }
  
  static public function sendEmail($from, $to, $subject, $body, $user=false,$use_single_email=true,$check_active_users = true, $attachments = array())
  {
    if(sfConfig::get('app_use_email_notification')=='off') return false;
      
    if(strlen(sfConfig::get('app_email_label'))>0)
    {
      $subject = sfConfig::get('app_email_label') . ' ' . $subject;
    }
    
    if(sfConfig::get('app_use_single_email')=='on' and $use_single_email)
    {
      if(strlen(sfConfig::get('app_single_email_addres_from'))>0 and strlen(sfConfig::get('app_single_name_from'))>0)
      {
        $from = array(sfConfig::get('app_single_email_addres_from')=>sfConfig::get('app_single_name_from'));
      }
    }
      
    if(sfConfig::get('app_use_smtp')=='on')
    {    
      $configuration = array('class'=>'sfMailer',
                            'logging'=>'1',
                            'charset'=>'utf-8',
                            'delivery_strategy'=>'realtime',
                            'transport'=>
                            array('class'=>'Swift_SmtpTransport',
                                  'param'=>
                                  array('host'=>sfConfig::get('app_smtp_server'),
                                        'port'=>sfConfig::get('app_smtp_port'),
                                        'encryption'=>sfConfig::get('app_smtp_encryption'),
                                        'username'=>sfConfig::get('app_smtp_login'),
                                        'password'=>sfConfig::get('app_smtp_pass'))));
    }
    else
    {
      $configuration = array('class'=>'sfMailer',
                            'logging'=>'1',
                            'charset'=>'utf-8',
                            'delivery_strategy'=>'realtime',
                            'transport'=>
                            array('class'=>'Swift_MailTransport'));
    }
    
    sfContext::getInstance()->setMailerConfiguration($configuration);
    
    $mailer = sfContext::getInstance()->getMailer();
          
    //don't send emails to inactive users
    if($check_active_users)
    {
      foreach($to as $toEmail=>$toName)
      {
        if(!Doctrine_Core::getTable('Users')->createQuery()->addWhere('active=1')->addWhere('email=?',$toEmail)->fetchOne())
        {
          unset($to[$toEmail]);
        }
      }
    }
    
    foreach($to as $toEmail=>$toName)
    {                  
      $html = str_replace(array("\r\n", "\n", "\r"),"",$body);  
      $text = strip_tags(str_replace(array('<br>','<p>','</p>','<h3>','</h3>','<tr>'),"\n",str_replace(array("\r\n", "\n", "\r"),"",$body)));  
              
      $message = sfContext::getInstance()->getMailer()->compose();
      $message->setSubject($subject);
      $message->setTo(array($toEmail=>$toName));
      $message->setFrom($from); 
      $message->setBody($html, 'text/html');
      $message->addPart($text, 'text/plain'); 
            
      if(count($attachments))
      {
        foreach($attachments as $v)
        {       
          $message->attach(Swift_Attachment::fromPath($v));
        }
      }            
                              
      try
      {                
        @$mailer->send($message);
      } 
      catch (Exception $e)
      {
        if($user)
        {
          $user->setFlash('userNotices', array('type'=>'error','text'=>'Error sending email: ' . $e->getMessage()));
        }
        else
        {
          die($e->getMessage());
        }                                                       
      }           
    }    
  }
  
  public static function getDefaultHomePagesList($sf_user=false)
  {    
    $l = array(''             => t::__('Dashboard'),
               'projects'     => t::__('Projects'));
               
               
    if($sf_user)
    {
      if(Users::hasAccess('view','tasks',$sf_user)) $l['tasks'] = t::__('Tasks');
      if(Users::hasAccess('view','tickets',$sf_user)) $l['tickets'] = t::__('Tickets');
      if(Users::hasAccess('view','discussions',$sf_user)) $l['discussions'] = t::__('Discussions');
      if($sf_user->hasCredential('public_scheduler_access_full_access') or $sf_user->hasCredential('public_scheduler_access_view_only')) $l['public_scheduler'] = t::__('Public Scheduler');
      if($sf_user->hasCredential('allow_manage_personal_scheduler'))     $l['scheduler'] = t::__('My Scheduler');
    }
    else
    {
      $l['tasks'] = t::__('Tasks');
      $l['tickets'] = t::__('Tickets');
      $l['discussions'] = t::__('Discussions');
      $l['public_scheduler'] = t::__('Public Scheduler') ;
      $l['scheduler'] = t::__('My Scheduler');
    }
                                                     
    return $l;                        
  }
  
  public static function checkAccess($c,$access,$module,$sf_user,$projects_id=false)
  {
    if(!Users::hasAccess($access,$module,$sf_user,$projects_id))
    {
      $c->redirect('accessForbidden/index');
    }
  }
  
  public static function hasProjectsAccess($access, $sf_user, $projects)
  {
    if(Users::hasAccess($access,'projects',$sf_user,$projects->getId()) and Projects::hasViewOwnAccess($sf_user,$projects))
    {
      return true;
    }
    else
    {
      return false;
    }
  }
  
  public static function hasTasksAccess($access, $sf_user, $tasks, $projects)
  {
    if(Users::hasAccess($access,'tasks',$sf_user,$projects->getId()) and Tasks::hasViewOwnAccess($sf_user,$tasks,$projects))
    {
      return true;
    }
    else
    {
      return false;
    }
  }
  
  public static function hasTicketsAccess($access, $sf_user, $tasks, $projects=null)
  {
    if($projects)
    {
      if(Users::hasAccess($access,'tickets',$sf_user,$projects->getId()) and Tickets::hasViewOwnAccess($sf_user,$tasks,$projects))
      {
        return true;
      }
      else
      {
        return false;
      }
    }
    else
    {
      if(Users::hasAccess($access,'tickets',$sf_user) and Tickets::hasViewOwnAccess($sf_user,$tasks))
      {
        return true;
      }
      else
      {
        return false;
      }
    }
  }
  
  public static function hasDiscussionsAccess($access, $sf_user, $discussions, $projects)
  {
    if(Users::hasAccess($access,'discussions',$sf_user,$projects->getId()) and Discussions::hasViewOwnAccess($sf_user,$discussions,$projects))
    {
      return true;
    }
    else
    {
      return false;
    }
  }
  
  public static function hasAccess($access,$module,$sf_user,$projects_id=false)
  {
    $schema = Users::getAccessSchema($module,$sf_user,$projects_id);
          
    if(strstr($access,'|'))
    {
      foreach(explode('|',$access) as $a)
      {
        if($schema[$a])
        {
          return true;
        }
      }
    }
    elseif($schema[$access])
    {
      return true;
    }
    
    return false;    
  }
    
  public static function getAccessSchema($module,$sf_user,$projects_id=false)
  {
    $access = array();
    $custom_access = array();
            
    $schema = array('view'      =>false,
                    'view_own'  =>false,                    
                    'insert'    =>false,
                    'edit'      =>false,
                    'delete'    =>false);
    
    if($sf_user->getAttribute('users_group_id')==0)
    {
      return $schema;
    }
                    
    $user = $sf_user->getAttribute('user');
    $usersGroups = $user->getUsersGroups();
   
    if($projects_id>0)
    {
      if(($role_id = ProjectsRoles::getRole($projects_id,$user->getId()))>0)
      {
        if($ug = Doctrine_Core::getTable('UsersGroups')->find($role_id))
        {
          $usersGroups = $ug;
        }
      }
    }
    
                        
    switch($module)
    {
      case 'projects':          
          $access = $usersGroups->getAllowManageProjects(); 
          $custom_access = explode(',',$usersGroups->getProjectsCustomAccess());
        break;
      case 'tasks':          
          $access = $usersGroups->getAllowManageTasks(); 
          $custom_access = explode(',',$usersGroups->getTasksCustomAccess());
        break;
      case 'tickets':          
          $access = $usersGroups->getAllowManageTickets(); 
          $custom_access = explode(',',$usersGroups->getTicketsCustomAccess());
        break;
      case 'discussions':          
          $access = $usersGroups->getAllowManageDiscussions(); 
          $custom_access = explode(',',$usersGroups->getDiscussionsCustomAccess());
        break;
      case 'projectsComments':
          $access = $usersGroups->getProjectsCommentsAccess();
        break;
     case 'tasksComments':
          $access = $usersGroups->getTasksCommentsAccess();
        break;
     case 'ticketsComments':
          $access = $usersGroups->getTicketsCommentsAccess();
        break;
     case 'discussionsComments':
          $access = $usersGroups->getDiscussionsCommentsAccess();
        break; 
     case 'projectsWiki':
          $access = $usersGroups->getAllowManageProjectsWiki();
        break;
     case 'publicWiki':
          $access = $usersGroups->getAllowManagePublicWiki();
        break;  
    }
    
    if($access=='custom')
    {      
      $schema['view'] = true;
      
      if(in_array('view_own_only',$custom_access))
      {
        $schema['view_own'] = true;
      }
      
      if(in_array('create',$custom_access))
      {
        $schema['insert'] = true;
      }
      
      if(in_array('edit',$custom_access))
      {
        $schema['edit'] = true;
      }
      
      if(in_array('delete',$custom_access))
      {
        $schema['delete'] = true;
      }
    }
    else
    {
      switch($access)
      {    
        case 'full_access':     
            $schema = array('view'      =>true,
                            'view_own'  =>false,                            
                            'insert'    =>true,
                            'edit'      =>true,
                            'delete'    =>true);
          break;        
        case 'manage_own_lnly':     
            $schema = array('view'      =>true,
                            'view_own'  =>true,                            
                            'insert'    =>true,
                            'edit'      =>true,
                            'delete'    =>true);
          break;
        case 'insert_only':     
            $schema = array('view'      =>true,
                            'view_own'  =>false,                            
                            'insert'    =>true,
                            'edit'      =>false,
                            'delete'    =>false);
          break;        
        case 'view_only':     
            $schema = array('view'      =>true,
                            'view_own'  =>false,                            
                            'insert'    =>false,
                            'edit'      =>false,
                            'delete'    =>false);
          break;        
        case 'view_own_only':     
            $schema = array('view'      =>true,
                            'view_own'  =>true,                            
                            'insert'    =>false,
                            'edit'      =>false,
                            'delete'    =>false);
          break;
      }   
    }
    
    //print_r($schema);
    
    return $schema;
  }
}