<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Discussions', 'doctrine');

/**
 * BaseDiscussions
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $projects_id
 * @property integer $users_id
 * @property integer $discussions_status_id
 * @property integer $discussions_groups_id
 * @property integer $discussions_priority_id
 * @property integer $discussions_types_id
 * @property string $name
 * @property string $description
 * @property string $assigned_to
 * @property timestamp $created_at
 * @property integer $in_trash
 * @property integer $in_trash_date
 * @property integer $last_comment_date
 * @property Projects $Projects
 * @property Users $Users
 * @property DiscussionsStatus $DiscussionsStatus
 * @property DiscussionsGroups $DiscussionsGroups
 * @property DiscussionsPriority $DiscussionsPriority
 * @property DiscussionsTypes $DiscussionsTypes
 * @property Doctrine_Collection $DiscussionsComments
 * @property Doctrine_Collection $TasksToDiscussions
 * @property Doctrine_Collection $TicketsToDiscussions
 * 
 * @method integer             getId()                      Returns the current record's "id" value
 * @method integer             getProjectsId()              Returns the current record's "projects_id" value
 * @method integer             getUsersId()                 Returns the current record's "users_id" value
 * @method integer             getDiscussionsStatusId()     Returns the current record's "discussions_status_id" value
 * @method integer             getDiscussionsGroupsId()     Returns the current record's "discussions_groups_id" value
 * @method integer             getDiscussionsPriorityId()   Returns the current record's "discussions_priority_id" value
 * @method integer             getDiscussionsTypesId()      Returns the current record's "discussions_types_id" value
 * @method string              getName()                    Returns the current record's "name" value
 * @method string              getDescription()             Returns the current record's "description" value
 * @method string              getAssignedTo()              Returns the current record's "assigned_to" value
 * @method timestamp           getCreatedAt()               Returns the current record's "created_at" value
 * @method integer             getInTrash()                 Returns the current record's "in_trash" value
 * @method integer             getInTrashDate()             Returns the current record's "in_trash_date" value
 * @method integer             getLastCommentDate()         Returns the current record's "last_comment_date" value
 * @method Projects            getProjects()                Returns the current record's "Projects" value
 * @method Users               getUsers()                   Returns the current record's "Users" value
 * @method DiscussionsStatus   getDiscussionsStatus()       Returns the current record's "DiscussionsStatus" value
 * @method DiscussionsGroups   getDiscussionsGroups()       Returns the current record's "DiscussionsGroups" value
 * @method DiscussionsPriority getDiscussionsPriority()     Returns the current record's "DiscussionsPriority" value
 * @method DiscussionsTypes    getDiscussionsTypes()        Returns the current record's "DiscussionsTypes" value
 * @method Doctrine_Collection getDiscussionsComments()     Returns the current record's "DiscussionsComments" collection
 * @method Doctrine_Collection getTasksToDiscussions()      Returns the current record's "TasksToDiscussions" collection
 * @method Doctrine_Collection getTicketsToDiscussions()    Returns the current record's "TicketsToDiscussions" collection
 * @method Discussions         setId()                      Sets the current record's "id" value
 * @method Discussions         setProjectsId()              Sets the current record's "projects_id" value
 * @method Discussions         setUsersId()                 Sets the current record's "users_id" value
 * @method Discussions         setDiscussionsStatusId()     Sets the current record's "discussions_status_id" value
 * @method Discussions         setDiscussionsGroupsId()     Sets the current record's "discussions_groups_id" value
 * @method Discussions         setDiscussionsPriorityId()   Sets the current record's "discussions_priority_id" value
 * @method Discussions         setDiscussionsTypesId()      Sets the current record's "discussions_types_id" value
 * @method Discussions         setName()                    Sets the current record's "name" value
 * @method Discussions         setDescription()             Sets the current record's "description" value
 * @method Discussions         setAssignedTo()              Sets the current record's "assigned_to" value
 * @method Discussions         setCreatedAt()               Sets the current record's "created_at" value
 * @method Discussions         setInTrash()                 Sets the current record's "in_trash" value
 * @method Discussions         setInTrashDate()             Sets the current record's "in_trash_date" value
 * @method Discussions         setLastCommentDate()         Sets the current record's "last_comment_date" value
 * @method Discussions         setProjects()                Sets the current record's "Projects" value
 * @method Discussions         setUsers()                   Sets the current record's "Users" value
 * @method Discussions         setDiscussionsStatus()       Sets the current record's "DiscussionsStatus" value
 * @method Discussions         setDiscussionsGroups()       Sets the current record's "DiscussionsGroups" value
 * @method Discussions         setDiscussionsPriority()     Sets the current record's "DiscussionsPriority" value
 * @method Discussions         setDiscussionsTypes()        Sets the current record's "DiscussionsTypes" value
 * @method Discussions         setDiscussionsComments()     Sets the current record's "DiscussionsComments" collection
 * @method Discussions         setTasksToDiscussions()      Sets the current record's "TasksToDiscussions" collection
 * @method Discussions         setTicketsToDiscussions()    Sets the current record's "TicketsToDiscussions" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDiscussions extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('discussions');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('projects_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('users_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('discussions_status_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('discussions_groups_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('discussions_priority_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('discussions_types_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('assigned_to', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('in_trash', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('in_trash_date', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('last_comment_date', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Projects', array(
             'local' => 'projects_id',
             'foreign' => 'id'));

        $this->hasOne('Users', array(
             'local' => 'users_id',
             'foreign' => 'id'));

        $this->hasOne('DiscussionsStatus', array(
             'local' => 'discussions_status_id',
             'foreign' => 'id'));

        $this->hasOne('DiscussionsGroups', array(
             'local' => 'discussions_groups_id',
             'foreign' => 'id'));

        $this->hasOne('DiscussionsPriority', array(
             'local' => 'discussions_priority_id',
             'foreign' => 'id'));

        $this->hasOne('DiscussionsTypes', array(
             'local' => 'discussions_types_id',
             'foreign' => 'id'));

        $this->hasMany('DiscussionsComments', array(
             'local' => 'id',
             'foreign' => 'discussions_id'));

        $this->hasMany('TasksToDiscussions', array(
             'local' => 'id',
             'foreign' => 'discussions_id'));

        $this->hasMany('TicketsToDiscussions', array(
             'local' => 'id',
             'foreign' => 'discussions_id'));
    }
}