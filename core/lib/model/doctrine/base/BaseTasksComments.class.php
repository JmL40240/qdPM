<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TasksComments', 'doctrine');

/**
 * BaseTasksComments
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $tasks_id
 * @property integer $created_by
 * @property integer $tasks_status_id
 * @property integer $tasks_priority_id
 * @property timestamp $due_date
 * @property float $worked_hours
 * @property string $description
 * @property timestamp $created_at
 * @property integer $progress
 * @property integer $in_trash
 * @property integer $in_trash_date
 * @property integer $tasks_types_id
 * @property integer $tasks_labels_id
 * @property float $togo_hours
 * @property TasksLabels $TasksLabels
 * @property Tasks $Tasks
 * @property Users $Users
 * @property TasksStatus $TasksStatus
 * @property TasksPriority $TasksPriority
 * @property TasksTypes $TasksTypes
 * 
 * @method integer       getId()                Returns the current record's "id" value
 * @method integer       getTasksId()           Returns the current record's "tasks_id" value
 * @method integer       getCreatedBy()         Returns the current record's "created_by" value
 * @method integer       getTasksStatusId()     Returns the current record's "tasks_status_id" value
 * @method integer       getTasksPriorityId()   Returns the current record's "tasks_priority_id" value
 * @method timestamp     getDueDate()           Returns the current record's "due_date" value
 * @method float         getWorkedHours()       Returns the current record's "worked_hours" value
 * @method string        getDescription()       Returns the current record's "description" value
 * @method timestamp     getCreatedAt()         Returns the current record's "created_at" value
 * @method integer       getProgress()          Returns the current record's "progress" value
 * @method integer       getInTrash()           Returns the current record's "in_trash" value
 * @method integer       getInTrashDate()       Returns the current record's "in_trash_date" value
 * @method integer       getTasksTypesId()      Returns the current record's "tasks_types_id" value
 * @method integer       getTasksLabelsId()     Returns the current record's "tasks_labels_id" value
 * @method float         getTogoHours()         Returns the current record's "togo_hours" value
 * @method TasksLabels   getTasksLabels()       Returns the current record's "TasksLabels" value
 * @method Tasks         getTasks()             Returns the current record's "Tasks" value
 * @method Users         getUsers()             Returns the current record's "Users" value
 * @method TasksStatus   getTasksStatus()       Returns the current record's "TasksStatus" value
 * @method TasksPriority getTasksPriority()     Returns the current record's "TasksPriority" value
 * @method TasksTypes    getTasksTypes()        Returns the current record's "TasksTypes" value
 * @method TasksComments setId()                Sets the current record's "id" value
 * @method TasksComments setTasksId()           Sets the current record's "tasks_id" value
 * @method TasksComments setCreatedBy()         Sets the current record's "created_by" value
 * @method TasksComments setTasksStatusId()     Sets the current record's "tasks_status_id" value
 * @method TasksComments setTasksPriorityId()   Sets the current record's "tasks_priority_id" value
 * @method TasksComments setDueDate()           Sets the current record's "due_date" value
 * @method TasksComments setWorkedHours()       Sets the current record's "worked_hours" value
 * @method TasksComments setDescription()       Sets the current record's "description" value
 * @method TasksComments setCreatedAt()         Sets the current record's "created_at" value
 * @method TasksComments setProgress()          Sets the current record's "progress" value
 * @method TasksComments setInTrash()           Sets the current record's "in_trash" value
 * @method TasksComments setInTrashDate()       Sets the current record's "in_trash_date" value
 * @method TasksComments setTasksTypesId()      Sets the current record's "tasks_types_id" value
 * @method TasksComments setTasksLabelsId()     Sets the current record's "tasks_labels_id" value
 * @method TasksComments setTogoHours()         Sets the current record's "togo_hours" value
 * @method TasksComments setTasksLabels()       Sets the current record's "TasksLabels" value
 * @method TasksComments setTasks()             Sets the current record's "Tasks" value
 * @method TasksComments setUsers()             Sets the current record's "Users" value
 * @method TasksComments setTasksStatus()       Sets the current record's "TasksStatus" value
 * @method TasksComments setTasksPriority()     Sets the current record's "TasksPriority" value
 * @method TasksComments setTasksTypes()        Sets the current record's "TasksTypes" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTasksComments extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tasks_comments');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('tasks_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_by', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tasks_status_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tasks_priority_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('due_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('worked_hours', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('progress', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('in_trash', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('in_trash_date', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tasks_types_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tasks_labels_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('togo_hours', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('TasksLabels', array(
             'local' => 'tasks_labels_id',
             'foreign' => 'id'));

        $this->hasOne('Tasks', array(
             'local' => 'tasks_id',
             'foreign' => 'id'));

        $this->hasOne('Users', array(
             'local' => 'created_by',
             'foreign' => 'id'));

        $this->hasOne('TasksStatus', array(
             'local' => 'tasks_status_id',
             'foreign' => 'id'));

        $this->hasOne('TasksPriority', array(
             'local' => 'tasks_priority_id',
             'foreign' => 'id'));

        $this->hasOne('TasksTypes', array(
             'local' => 'tasks_types_id',
             'foreign' => 'id'));
    }
}