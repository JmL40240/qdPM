<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Projects', 'doctrine');

/**
 * BaseProjects
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $projects_status_id
 * @property integer $projects_priority_id
 * @property integer $projects_types_id
 * @property integer $projects_groups_id
 * @property integer $created_by
 * @property string $name
 * @property string $description
 * @property string $team
 * @property timestamp $created_at
 * @property string $order_tasks_by
 * @property integer $is_public
 * @property string $tasks_view
 * @property integer $in_trash
 * @property integer $in_trash_date
 * @property integer $last_comment_date
 * @property string $departments
 * @property ProjectsStatus $ProjectsStatus
 * @property ProjectsTypes $ProjectsTypes
 * @property Users $Users
 * @property ProjectsGroups $ProjectsGroups
 * @property ProjectsPriority $ProjectsPriority
 * @property Doctrine_Collection $Discussions
 * @property Doctrine_Collection $ProjectsComments
 * @property Doctrine_Collection $ProjectsPhases
 * @property Doctrine_Collection $ProjectsRoles
 * @property Doctrine_Collection $Tasks
 * @property Doctrine_Collection $TasksGroups
 * @property Doctrine_Collection $Tickets
 * @property Doctrine_Collection $UsersListingsOrder
 * @property Doctrine_Collection $Versions
 * @property Doctrine_Collection $Wiki
 * @property Doctrine_Collection $WikiHistory
 * 
 * @method integer             getId()                   Returns the current record's "id" value
 * @method integer             getProjectsStatusId()     Returns the current record's "projects_status_id" value
 * @method integer             getProjectsPriorityId()   Returns the current record's "projects_priority_id" value
 * @method integer             getProjectsTypesId()      Returns the current record's "projects_types_id" value
 * @method integer             getProjectsGroupsId()     Returns the current record's "projects_groups_id" value
 * @method integer             getCreatedBy()            Returns the current record's "created_by" value
 * @method string              getName()                 Returns the current record's "name" value
 * @method string              getDescription()          Returns the current record's "description" value
 * @method string              getTeam()                 Returns the current record's "team" value
 * @method timestamp           getCreatedAt()            Returns the current record's "created_at" value
 * @method string              getOrderTasksBy()         Returns the current record's "order_tasks_by" value
 * @method integer             getIsPublic()             Returns the current record's "is_public" value
 * @method string              getTasksView()            Returns the current record's "tasks_view" value
 * @method integer             getInTrash()              Returns the current record's "in_trash" value
 * @method integer             getInTrashDate()          Returns the current record's "in_trash_date" value
 * @method integer             getLastCommentDate()      Returns the current record's "last_comment_date" value
 * @method string              getDepartments()          Returns the current record's "departments" value
 * @method ProjectsStatus      getProjectsStatus()       Returns the current record's "ProjectsStatus" value
 * @method ProjectsTypes       getProjectsTypes()        Returns the current record's "ProjectsTypes" value
 * @method Users               getUsers()                Returns the current record's "Users" value
 * @method ProjectsGroups      getProjectsGroups()       Returns the current record's "ProjectsGroups" value
 * @method ProjectsPriority    getProjectsPriority()     Returns the current record's "ProjectsPriority" value
 * @method Doctrine_Collection getDiscussions()          Returns the current record's "Discussions" collection
 * @method Doctrine_Collection getProjectsComments()     Returns the current record's "ProjectsComments" collection
 * @method Doctrine_Collection getProjectsPhases()       Returns the current record's "ProjectsPhases" collection
 * @method Doctrine_Collection getProjectsRoles()        Returns the current record's "ProjectsRoles" collection
 * @method Doctrine_Collection getTasks()                Returns the current record's "Tasks" collection
 * @method Doctrine_Collection getTasksGroups()          Returns the current record's "TasksGroups" collection
 * @method Doctrine_Collection getTickets()              Returns the current record's "Tickets" collection
 * @method Doctrine_Collection getUsersListingsOrder()   Returns the current record's "UsersListingsOrder" collection
 * @method Doctrine_Collection getVersions()             Returns the current record's "Versions" collection
 * @method Doctrine_Collection getWiki()                 Returns the current record's "Wiki" collection
 * @method Doctrine_Collection getWikiHistory()          Returns the current record's "WikiHistory" collection
 * @method Projects            setId()                   Sets the current record's "id" value
 * @method Projects            setProjectsStatusId()     Sets the current record's "projects_status_id" value
 * @method Projects            setProjectsPriorityId()   Sets the current record's "projects_priority_id" value
 * @method Projects            setProjectsTypesId()      Sets the current record's "projects_types_id" value
 * @method Projects            setProjectsGroupsId()     Sets the current record's "projects_groups_id" value
 * @method Projects            setCreatedBy()            Sets the current record's "created_by" value
 * @method Projects            setName()                 Sets the current record's "name" value
 * @method Projects            setDescription()          Sets the current record's "description" value
 * @method Projects            setTeam()                 Sets the current record's "team" value
 * @method Projects            setCreatedAt()            Sets the current record's "created_at" value
 * @method Projects            setOrderTasksBy()         Sets the current record's "order_tasks_by" value
 * @method Projects            setIsPublic()             Sets the current record's "is_public" value
 * @method Projects            setTasksView()            Sets the current record's "tasks_view" value
 * @method Projects            setInTrash()              Sets the current record's "in_trash" value
 * @method Projects            setInTrashDate()          Sets the current record's "in_trash_date" value
 * @method Projects            setLastCommentDate()      Sets the current record's "last_comment_date" value
 * @method Projects            setDepartments()          Sets the current record's "departments" value
 * @method Projects            setProjectsStatus()       Sets the current record's "ProjectsStatus" value
 * @method Projects            setProjectsTypes()        Sets the current record's "ProjectsTypes" value
 * @method Projects            setUsers()                Sets the current record's "Users" value
 * @method Projects            setProjectsGroups()       Sets the current record's "ProjectsGroups" value
 * @method Projects            setProjectsPriority()     Sets the current record's "ProjectsPriority" value
 * @method Projects            setDiscussions()          Sets the current record's "Discussions" collection
 * @method Projects            setProjectsComments()     Sets the current record's "ProjectsComments" collection
 * @method Projects            setProjectsPhases()       Sets the current record's "ProjectsPhases" collection
 * @method Projects            setProjectsRoles()        Sets the current record's "ProjectsRoles" collection
 * @method Projects            setTasks()                Sets the current record's "Tasks" collection
 * @method Projects            setTasksGroups()          Sets the current record's "TasksGroups" collection
 * @method Projects            setTickets()              Sets the current record's "Tickets" collection
 * @method Projects            setUsersListingsOrder()   Sets the current record's "UsersListingsOrder" collection
 * @method Projects            setVersions()             Sets the current record's "Versions" collection
 * @method Projects            setWiki()                 Sets the current record's "Wiki" collection
 * @method Projects            setWikiHistory()          Sets the current record's "WikiHistory" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProjects extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('projects');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('projects_status_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('projects_priority_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('projects_types_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('projects_groups_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_by', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('team', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('order_tasks_by', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('is_public', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('tasks_view', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('in_trash', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('in_trash_date', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('last_comment_date', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('departments', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProjectsStatus', array(
             'local' => 'projects_status_id',
             'foreign' => 'id'));

        $this->hasOne('ProjectsTypes', array(
             'local' => 'projects_types_id',
             'foreign' => 'id'));

        $this->hasOne('Users', array(
             'local' => 'created_by',
             'foreign' => 'id'));

        $this->hasOne('ProjectsGroups', array(
             'local' => 'projects_groups_id',
             'foreign' => 'id'));

        $this->hasOne('ProjectsPriority', array(
             'local' => 'projects_priority_id',
             'foreign' => 'id'));

        $this->hasMany('Discussions', array(
             'local' => 'id',
             'foreign' => 'projects_id'));

        $this->hasMany('ProjectsComments', array(
             'local' => 'id',
             'foreign' => 'projects_id'));

        $this->hasMany('ProjectsPhases', array(
             'local' => 'id',
             'foreign' => 'projects_id'));

        $this->hasMany('ProjectsRoles', array(
             'local' => 'id',
             'foreign' => 'projects_id'));

        $this->hasMany('Tasks', array(
             'local' => 'id',
             'foreign' => 'projects_id'));

        $this->hasMany('TasksGroups', array(
             'local' => 'id',
             'foreign' => 'projects_id'));

        $this->hasMany('Tickets', array(
             'local' => 'id',
             'foreign' => 'projects_id'));

        $this->hasMany('UsersListingsOrder', array(
             'local' => 'id',
             'foreign' => 'projects_id'));

        $this->hasMany('Versions', array(
             'local' => 'id',
             'foreign' => 'projects_id'));

        $this->hasMany('Wiki', array(
             'local' => 'id',
             'foreign' => 'projects_id'));

        $this->hasMany('WikiHistory', array(
             'local' => 'id',
             'foreign' => 'projects_id'));
    }
}