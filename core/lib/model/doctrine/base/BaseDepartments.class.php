<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Departments', 'doctrine');

/**
 * BaseDepartments
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property integer $sort_order
 * @property integer $active
 * @property integer $users_id
 * @property string $tickets_types
 * @property integer $public_status
 * @property integer $use_for_email_tickets
 * @property string $imap_server
 * @property string $imap_mailbox
 * @property string $imap_login
 * @property string $imap_pass
 * @property integer $imap_delete_emails
 * @property string $new_ticket_message
 * @property string $ticket_comment_message
 * @property Users $Users
 * @property Doctrine_Collection $Tickets
 * @property Doctrine_Collection $TicketsComments
 * 
 * @method integer             getId()                     Returns the current record's "id" value
 * @method string              getName()                   Returns the current record's "name" value
 * @method integer             getSortOrder()              Returns the current record's "sort_order" value
 * @method integer             getActive()                 Returns the current record's "active" value
 * @method integer             getUsersId()                Returns the current record's "users_id" value
 * @method string              getTicketsTypes()           Returns the current record's "tickets_types" value
 * @method integer             getPublicStatus()           Returns the current record's "public_status" value
 * @method integer             getUseForEmailTickets()     Returns the current record's "use_for_email_tickets" value
 * @method string              getImapServer()             Returns the current record's "imap_server" value
 * @method string              getImapMailbox()            Returns the current record's "imap_mailbox" value
 * @method string              getImapLogin()              Returns the current record's "imap_login" value
 * @method string              getImapPass()               Returns the current record's "imap_pass" value
 * @method integer             getImapDeleteEmails()       Returns the current record's "imap_delete_emails" value
 * @method string              getNewTicketMessage()       Returns the current record's "new_ticket_message" value
 * @method string              getTicketCommentMessage()   Returns the current record's "ticket_comment_message" value
 * @method Users               getUsers()                  Returns the current record's "Users" value
 * @method Doctrine_Collection getTickets()                Returns the current record's "Tickets" collection
 * @method Doctrine_Collection getTicketsComments()        Returns the current record's "TicketsComments" collection
 * @method Departments         setId()                     Sets the current record's "id" value
 * @method Departments         setName()                   Sets the current record's "name" value
 * @method Departments         setSortOrder()              Sets the current record's "sort_order" value
 * @method Departments         setActive()                 Sets the current record's "active" value
 * @method Departments         setUsersId()                Sets the current record's "users_id" value
 * @method Departments         setTicketsTypes()           Sets the current record's "tickets_types" value
 * @method Departments         setPublicStatus()           Sets the current record's "public_status" value
 * @method Departments         setUseForEmailTickets()     Sets the current record's "use_for_email_tickets" value
 * @method Departments         setImapServer()             Sets the current record's "imap_server" value
 * @method Departments         setImapMailbox()            Sets the current record's "imap_mailbox" value
 * @method Departments         setImapLogin()              Sets the current record's "imap_login" value
 * @method Departments         setImapPass()               Sets the current record's "imap_pass" value
 * @method Departments         setImapDeleteEmails()       Sets the current record's "imap_delete_emails" value
 * @method Departments         setNewTicketMessage()       Sets the current record's "new_ticket_message" value
 * @method Departments         setTicketCommentMessage()   Sets the current record's "ticket_comment_message" value
 * @method Departments         setUsers()                  Sets the current record's "Users" value
 * @method Departments         setTickets()                Sets the current record's "Tickets" collection
 * @method Departments         setTicketsComments()        Sets the current record's "TicketsComments" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDepartments extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('departments');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('sort_order', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('active', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('users_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tickets_types', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('public_status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('use_for_email_tickets', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('imap_server', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('imap_mailbox', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('imap_login', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('imap_pass', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('imap_delete_emails', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('new_ticket_message', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('ticket_comment_message', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Users', array(
             'local' => 'users_id',
             'foreign' => 'id'));

        $this->hasMany('Tickets', array(
             'local' => 'id',
             'foreign' => 'departments_id'));

        $this->hasMany('TicketsComments', array(
             'local' => 'id',
             'foreign' => 'departments_id'));
    }
}