<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TasksTimer', 'doctrine');

/**
 * BaseTasksTimer
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $tasks_id
 * @property integer $users_id
 * @property integer $seconds
 * @property integer $visible
 * @property Tasks $Tasks
 * @property Users $Users
 * 
 * @method integer    getId()       Returns the current record's "id" value
 * @method integer    getTasksId()  Returns the current record's "tasks_id" value
 * @method integer    getUsersId()  Returns the current record's "users_id" value
 * @method integer    getSeconds()  Returns the current record's "seconds" value
 * @method integer    getVisible()  Returns the current record's "visible" value
 * @method Tasks      getTasks()    Returns the current record's "Tasks" value
 * @method Users      getUsers()    Returns the current record's "Users" value
 * @method TasksTimer setId()       Sets the current record's "id" value
 * @method TasksTimer setTasksId()  Sets the current record's "tasks_id" value
 * @method TasksTimer setUsersId()  Sets the current record's "users_id" value
 * @method TasksTimer setSeconds()  Sets the current record's "seconds" value
 * @method TasksTimer setVisible()  Sets the current record's "visible" value
 * @method TasksTimer setTasks()    Sets the current record's "Tasks" value
 * @method TasksTimer setUsers()    Sets the current record's "Users" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTasksTimer extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tasks_timer');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('tasks_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('users_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('seconds', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('visible', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Tasks', array(
             'local' => 'tasks_id',
             'foreign' => 'id'));

        $this->hasOne('Users', array(
             'local' => 'users_id',
             'foreign' => 'id'));
    }
}