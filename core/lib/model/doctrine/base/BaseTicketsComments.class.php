<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TicketsComments', 'doctrine');

/**
 * BaseTicketsComments
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $description
 * @property timestamp $created_at
 * @property integer $tickets_id
 * @property integer $users_id
 * @property integer $tickets_status_id
 * @property string $user_name
 * @property string $user_email
 * @property string $message_id
 * @property integer $in_trash
 * @property integer $in_trash_date
 * @property integer $tickets_groups_id
 * @property integer $tickets_priority_id
 * @property integer $tickets_types_id
 * @property integer $departments_id
 * @property Tickets $Tickets
 * @property Users $Users
 * @property TicketsStatus $TicketsStatus
 * @property TicketsGroups $TicketsGroups
 * @property TicketsPriority $TicketsPriority
 * @property Departments $Departments
 * @property TicketsTypes $TicketsTypes
 * 
 * @method integer         getId()                  Returns the current record's "id" value
 * @method string          getDescription()         Returns the current record's "description" value
 * @method timestamp       getCreatedAt()           Returns the current record's "created_at" value
 * @method integer         getTicketsId()           Returns the current record's "tickets_id" value
 * @method integer         getUsersId()             Returns the current record's "users_id" value
 * @method integer         getTicketsStatusId()     Returns the current record's "tickets_status_id" value
 * @method string          getUserName()            Returns the current record's "user_name" value
 * @method string          getUserEmail()           Returns the current record's "user_email" value
 * @method string          getMessageId()           Returns the current record's "message_id" value
 * @method integer         getInTrash()             Returns the current record's "in_trash" value
 * @method integer         getInTrashDate()         Returns the current record's "in_trash_date" value
 * @method integer         getTicketsGroupsId()     Returns the current record's "tickets_groups_id" value
 * @method integer         getTicketsPriorityId()   Returns the current record's "tickets_priority_id" value
 * @method integer         getTicketsTypesId()      Returns the current record's "tickets_types_id" value
 * @method integer         getDepartmentsId()       Returns the current record's "departments_id" value
 * @method Tickets         getTickets()             Returns the current record's "Tickets" value
 * @method Users           getUsers()               Returns the current record's "Users" value
 * @method TicketsStatus   getTicketsStatus()       Returns the current record's "TicketsStatus" value
 * @method TicketsGroups   getTicketsGroups()       Returns the current record's "TicketsGroups" value
 * @method TicketsPriority getTicketsPriority()     Returns the current record's "TicketsPriority" value
 * @method Departments     getDepartments()         Returns the current record's "Departments" value
 * @method TicketsTypes    getTicketsTypes()        Returns the current record's "TicketsTypes" value
 * @method TicketsComments setId()                  Sets the current record's "id" value
 * @method TicketsComments setDescription()         Sets the current record's "description" value
 * @method TicketsComments setCreatedAt()           Sets the current record's "created_at" value
 * @method TicketsComments setTicketsId()           Sets the current record's "tickets_id" value
 * @method TicketsComments setUsersId()             Sets the current record's "users_id" value
 * @method TicketsComments setTicketsStatusId()     Sets the current record's "tickets_status_id" value
 * @method TicketsComments setUserName()            Sets the current record's "user_name" value
 * @method TicketsComments setUserEmail()           Sets the current record's "user_email" value
 * @method TicketsComments setMessageId()           Sets the current record's "message_id" value
 * @method TicketsComments setInTrash()             Sets the current record's "in_trash" value
 * @method TicketsComments setInTrashDate()         Sets the current record's "in_trash_date" value
 * @method TicketsComments setTicketsGroupsId()     Sets the current record's "tickets_groups_id" value
 * @method TicketsComments setTicketsPriorityId()   Sets the current record's "tickets_priority_id" value
 * @method TicketsComments setTicketsTypesId()      Sets the current record's "tickets_types_id" value
 * @method TicketsComments setDepartmentsId()       Sets the current record's "departments_id" value
 * @method TicketsComments setTickets()             Sets the current record's "Tickets" value
 * @method TicketsComments setUsers()               Sets the current record's "Users" value
 * @method TicketsComments setTicketsStatus()       Sets the current record's "TicketsStatus" value
 * @method TicketsComments setTicketsGroups()       Sets the current record's "TicketsGroups" value
 * @method TicketsComments setTicketsPriority()     Sets the current record's "TicketsPriority" value
 * @method TicketsComments setDepartments()         Sets the current record's "Departments" value
 * @method TicketsComments setTicketsTypes()        Sets the current record's "TicketsTypes" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTicketsComments extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tickets_comments');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('tickets_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('users_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tickets_status_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('user_name', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('user_email', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('message_id', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('in_trash', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('in_trash_date', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tickets_groups_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tickets_priority_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tickets_types_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('departments_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Tickets', array(
             'local' => 'tickets_id',
             'foreign' => 'id'));

        $this->hasOne('Users', array(
             'local' => 'users_id',
             'foreign' => 'id'));

        $this->hasOne('TicketsStatus', array(
             'local' => 'tickets_status_id',
             'foreign' => 'id'));

        $this->hasOne('TicketsGroups', array(
             'local' => 'tickets_groups_id',
             'foreign' => 'id'));

        $this->hasOne('TicketsPriority', array(
             'local' => 'tickets_priority_id',
             'foreign' => 'id'));

        $this->hasOne('Departments', array(
             'local' => 'departments_id',
             'foreign' => 'id'));

        $this->hasOne('TicketsTypes', array(
             'local' => 'tickets_types_id',
             'foreign' => 'id'));
    }
}