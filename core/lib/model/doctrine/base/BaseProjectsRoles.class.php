<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ProjectsRoles', 'doctrine');

/**
 * BaseProjectsRoles
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $projects_id
 * @property integer $users_id
 * @property integer $users_groups_id
 * @property Users $Users
 * @property UsersGroups $UsersGroups
 * @property Projects $Projects
 * 
 * @method integer       getId()              Returns the current record's "id" value
 * @method integer       getProjectsId()      Returns the current record's "projects_id" value
 * @method integer       getUsersId()         Returns the current record's "users_id" value
 * @method integer       getUsersGroupsId()   Returns the current record's "users_groups_id" value
 * @method Users         getUsers()           Returns the current record's "Users" value
 * @method UsersGroups   getUsersGroups()     Returns the current record's "UsersGroups" value
 * @method Projects      getProjects()        Returns the current record's "Projects" value
 * @method ProjectsRoles setId()              Sets the current record's "id" value
 * @method ProjectsRoles setProjectsId()      Sets the current record's "projects_id" value
 * @method ProjectsRoles setUsersId()         Sets the current record's "users_id" value
 * @method ProjectsRoles setUsersGroupsId()   Sets the current record's "users_groups_id" value
 * @method ProjectsRoles setUsers()           Sets the current record's "Users" value
 * @method ProjectsRoles setUsersGroups()     Sets the current record's "UsersGroups" value
 * @method ProjectsRoles setProjects()        Sets the current record's "Projects" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProjectsRoles extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('projects_roles');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('projects_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('users_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('users_groups_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Users', array(
             'local' => 'users_id',
             'foreign' => 'id'));

        $this->hasOne('UsersGroups', array(
             'local' => 'users_groups_id',
             'foreign' => 'id'));

        $this->hasOne('Projects', array(
             'local' => 'projects_id',
             'foreign' => 'id'));
    }
}