<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Events', 'doctrine');

/**
 * BaseEvents
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $event_name
 * @property timestamp $start_date
 * @property timestamp $end_date
 * @property string $description
 * @property integer $users_id
 * @property integer $events_priority_id
 * @property integer $events_types_id
 * @property integer $public_status
 * @property string $repeat_type
 * @property integer $repeat_interval
 * @property string $repeat_days
 * @property date $repeat_end
 * @property integer $repeat_limit
 * @property Users $Users
 * @property EventsPriority $EventsPriority
 * @property EventsTypes $EventsTypes
 * 
 * @method integer        getId()                 Returns the current record's "id" value
 * @method string         getEventName()          Returns the current record's "event_name" value
 * @method timestamp      getStartDate()          Returns the current record's "start_date" value
 * @method timestamp      getEndDate()            Returns the current record's "end_date" value
 * @method string         getDescription()        Returns the current record's "description" value
 * @method integer        getUsersId()            Returns the current record's "users_id" value
 * @method integer        getEventsPriorityId()   Returns the current record's "events_priority_id" value
 * @method integer        getEventsTypesId()      Returns the current record's "events_types_id" value
 * @method integer        getPublicStatus()       Returns the current record's "public_status" value
 * @method string         getRepeatType()         Returns the current record's "repeat_type" value
 * @method integer        getRepeatInterval()     Returns the current record's "repeat_interval" value
 * @method string         getRepeatDays()         Returns the current record's "repeat_days" value
 * @method date           getRepeatEnd()          Returns the current record's "repeat_end" value
 * @method integer        getRepeatLimit()        Returns the current record's "repeat_limit" value
 * @method Users          getUsers()              Returns the current record's "Users" value
 * @method EventsPriority getEventsPriority()     Returns the current record's "EventsPriority" value
 * @method EventsTypes    getEventsTypes()        Returns the current record's "EventsTypes" value
 * @method Events         setId()                 Sets the current record's "id" value
 * @method Events         setEventName()          Sets the current record's "event_name" value
 * @method Events         setStartDate()          Sets the current record's "start_date" value
 * @method Events         setEndDate()            Sets the current record's "end_date" value
 * @method Events         setDescription()        Sets the current record's "description" value
 * @method Events         setUsersId()            Sets the current record's "users_id" value
 * @method Events         setEventsPriorityId()   Sets the current record's "events_priority_id" value
 * @method Events         setEventsTypesId()      Sets the current record's "events_types_id" value
 * @method Events         setPublicStatus()       Sets the current record's "public_status" value
 * @method Events         setRepeatType()         Sets the current record's "repeat_type" value
 * @method Events         setRepeatInterval()     Sets the current record's "repeat_interval" value
 * @method Events         setRepeatDays()         Sets the current record's "repeat_days" value
 * @method Events         setRepeatEnd()          Sets the current record's "repeat_end" value
 * @method Events         setRepeatLimit()        Sets the current record's "repeat_limit" value
 * @method Events         setUsers()              Sets the current record's "Users" value
 * @method Events         setEventsPriority()     Sets the current record's "EventsPriority" value
 * @method Events         setEventsTypes()        Sets the current record's "EventsTypes" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvents extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('events');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('event_name', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('start_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('end_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('users_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('events_priority_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('events_types_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('public_status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('repeat_type', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('repeat_interval', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('repeat_days', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('repeat_end', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('repeat_limit', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Users', array(
             'local' => 'users_id',
             'foreign' => 'id'));

        $this->hasOne('EventsPriority', array(
             'local' => 'events_priority_id',
             'foreign' => 'id'));

        $this->hasOne('EventsTypes', array(
             'local' => 'events_types_id',
             'foreign' => 'id'));
    }
}