<?php

/**
 * Discussions
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Discussions extends BaseDiscussions
{
  public static function hasViewOwnAccess($sf_user,$discussions,$project)
  {
    if(Users::hasAccess('view_own','discussions',$sf_user,$project->getId()))
    {      
      if(!in_array($sf_user->getAttribute('id'),explode(',',$discussions->getAssignedTo())) and $discussions->getUsersId()!=$sf_user->getAttribute('id'))
      {
        return false;
      }
      else
      {
        return true;
      }
    }
    else
    {
      return true;
    }
  }
  
  public static function checkViewOwnAccess($c,$sf_user,$discussions,$project)
  {
    if(Users::hasAccess('view_own','discussions',$sf_user,$project->getId()))
    {      
      if(!in_array($sf_user->getAttribute('id'),explode(',',$discussions->getAssignedTo())) and $discussions->getUsersId()!=$sf_user->getAttribute('id'))
      {
        $c->redirect('accessForbidden/index');
      }
    }
  }
  
  public static function sendNotification($c,$discussions,$send_to,$sf_user)
  {
    foreach($send_to as $type=>$users)
    {
      switch($type)
      {
        case 'status': $subject = t::__('Discussion Status Updated');
          break;
        default: $subject = t::__('New Discussion');
          break;
      }
      
      $to = array();
      foreach($users as $v)
      {
        if($u = Doctrine_Core::getTable('Users')->find($v))
        {
          $to[$u->getEmail()]=$u->getName();
        }
      }
                
      $user = $sf_user->getAttribute('user');
      
      $from[$user->getEmail()] = $user->getName();
      $to[$discussions->getUsers()->getEmail()] = $discussions->getUsers()->getName();        
      $to[$user->getEmail()] = $user->getName(); 
      
      if(sfConfig::get('app_send_email_to_owner')=='off')
      {
        unset($to[$user->getEmail()]);             
      }
       
      $subject .= ': ' . $discussions->getProjects()->getName() . ' - '  .  $discussions->getName() . ($discussions->getDiscussionsStatusId()>0 ? ' [' . $discussions->getDiscussionsStatus()->getName() . ']':'');
      $body  = $c->getComponent('discussions','emailBody',array('discussions'=>$discussions));
                  
      Users::sendEmail($from,$to,$subject,$body,$sf_user);
    }                
  }
    
  public static function addFiltersToQuery($q,$filters)
  {    
    $count_e = 0;
    
    foreach($filters as $table=>$fstr)
    {
      $ids = explode(',',$fstr);
      
      switch($table)
      {
        case 'DiscussionsPriority':
            $q->whereIn('d.discussions_priority_id',$ids);
          break;
        case 'DiscussionsStatus':
            $q->whereIn('d.discussions_status_id',$ids);
          break;
        case 'DiscussionsTypes':
            $q->whereIn('d.discussions_types_id',$ids);
          break;
        case 'DiscussionsGroups':
            $q->whereIn('d.discussions_groups_id',$ids);
          break;  
        case 'DiscussionsAssignedTo':
            $filter_sql_array = array();
            foreach($ids as $id)
            {
              $filter_sql_array[] = 'find_in_set(' . $id . ',d.assigned_to)';
            }
            
            $q->addWhere(implode(' or ',$filter_sql_array));
          break;
        case 'DiscussionsCreatedBy':
            $filter_sql_array = array();
            foreach($ids as $id)
            {
              $filter_sql_array[] = 'find_in_set(' . $id . ',d.users_id)';
            }
            
            $q->addWhere(implode(' or ',$filter_sql_array));
          break; 
          
        case 'Projects':
            $q->whereIn('d.projects_id',$ids);
          break; 
        case 'ProjectsPriority':
            $q->whereIn('p.projects_priority_id',$ids);
          break;
        case 'ProjectsStatus':
            $q->whereIn('p.projects_status_id',$ids);
          break;
        case 'ProjectsTypes':
            $q->whereIn('p.projects_types_id',$ids);
          break;
        case 'ProjectsGroups':
            $q->whereIn('p.projects_groups_id',$ids);
          break;
        
      }
      
      if(strstr($table,'extraField'))
      {
        $efId = str_replace('extraField','',$table);
        
        $filter_sql_array = array();
        foreach($ids as $id)
        {
          $filter_sql_array[] = 'find_in_set("' . $id . '",REPLACE(e' . ($count_e>0?$count_e:''). '.value,"\n",","))';
        }
                
        $sql = '(SELECT COUNT(*) FROM ExtraFieldsList efl' . $efId . ' WHERE  (' . implode(' OR ',$filter_sql_array) . ') AND efl' . $efId . '.bind_id=d.id AND efl' . $efId . '.extra_fields_id="' . $efId . '")>0';
                        
        $q->addWhere($sql);
        
        if($count_e==0)
        {
          $count_e=2;
        }
        else
        {
          $count_e++;
        }        
      }
    }
          
    return $q;  
  }
  
  public static function getReportType($request)
  {
    if((int)$request->getParameter('projects_id')>0)
    {
      return 'filter' . $request->getParameter('projects_id');
    }
    else
    {
      return 'filter';
    }
  }
  
  public static function saveDiscussionsFilter($request, $filters,$sf_user)
  {  
    $report_type = Discussions::getReportType($request);
    
    if($request->getParameter('update_user_filter')>0)
    {            
      $r = Doctrine_Core::getTable('DiscussionsReports')->createQuery()
            ->addWhere('id=?',$request->getParameter('update_user_filter'))
            ->addWhere('users_id=?',$sf_user->getAttribute('id'))
            ->addWhere('report_type=?',$report_type)
            ->fetchOne();
            
      if($r)
      {
        $r->setName($request->getParameter('name'));  
        $r->setIsDefault($request->getParameter('is_default'));
      }
      else
      {
        return false;
      }
    }
    else
    {    
      $r = new DiscussionsReports();
      $r->setName($request->getParameter('name'));
      $r->setUsersId($sf_user->getAttribute('id'));
      $r->setReportType($report_type);
      $r->setIsDefault($request->getParameter('is_default'));
    }
    
    if(!$request->hasParameter('update_user_filter') or ($request->hasParameter('update_user_filter') and $request->hasParameter('update_values')))
    {
      foreach($filters as $table=>$fstr)
      {            
        switch($table)
        {
          case 'DiscussionsPriority':
              $r->setDiscussionsPriorityId($fstr);            
            break;
          case 'DiscussionsStatus':
              $r->setDiscussionsStatusId($fstr);            
            break;
          case 'DiscussionsTypes':
              $r->setDiscussionsTypeId($fstr);            
            break;
          case 'DiscussionsGroups':
              $r->setDiscussionsGroupsId($fstr);            
            break;  
          case 'DiscussionsAssignedTo':
              $r->setAssignedTo($fstr);            
            break;
          case 'DiscussionsCreatedBy':
              $r->setCreatedBy($fstr);            
            break;  
        
        
          case 'Projects':
              $r->setProjectsId($fstr);            
            break;
          case 'ProjectsPriority':
              $r->setProjectsPriorityId($fstr);            
            break;
          case 'ProjectsStatus':
              $r->setProjectsStatusId($fstr);            
            break;
          case 'ProjectsTypes':
              $r->setProjectsTypeId($fstr);            
            break;
          case 'ProjectsGroups':
              $r->setProjectsGroupsId($fstr);            
            break;

        }
      }
    }
          
    $r->save();
    
    if($r->getIsDefault()==1)
    {
      Doctrine_Query::create()
      ->update('DiscussionsReports')
      ->set('is_default', 0)
      ->addWhere('id != ?', $r->getId())
      ->addWhere('report_type=?',$report_type)
      ->execute();
    }  
  }
  
  public static function useDiscussionsFilter($request,$sf_user)
  {
    $id = $request->getParameter('user_filter');
    
    $report_type = Discussions::getReportType($request);
    
    $f = array();
    
    $r = Doctrine_Core::getTable('DiscussionsReports')
                ->createQuery()
                ->addWhere('id=?',$id)
                ->addWhere('report_type=?',$report_type)
                ->addWhere('users_id=?',$sf_user->getAttribute('id'))
                ->fetchOne();
    
    if(strlen($r->getDiscussionsPriorityId())>0)
    {
      $f['DiscussionsPriority'] = $r->getDiscussionsPriorityId(); 
    }
    
    if(strlen($r->getDiscussionsStatusId())>0)
    {
      $f['DiscussionsStatus'] = $r->getDiscussionsStatusId(); 
    }
                
    if(strlen($r->getDiscussionsTypesId())>0)
    {
      $f['DiscussionsTypes'] = $r->getDiscussionsTypesId(); 
    }

    if(strlen($r->getDiscussionsGroupsId())>0)
    {
      $f['DiscussionsGroups'] = $r->getDiscussionsGroupsId(); 
    }
        
    if(strlen($r->getAssignedTo())>0)
    {
      $f['DiscussionsAssignedTo'] = $r->getAssignedTo(); 
    }
    
    if(strlen($r->getCreatedBy())>0)
    {
      $f['DiscussionsCreatedBy'] = $r->getCreatedBy(); 
    }
    
    if(strlen($r->getProjectsId())>0)
    {
      $f['Projects'] = $r->getProjectsId(); 
    }
    
    if(strlen($r->getProjectsPriorityId())>0)
    {
      $f['ProjectsPriority'] = $r->getProjectsPriorityId(); 
    }
    
    if(strlen($r->getProjectsStatusId())>0)
    {
      $f['ProjectsStatus'] = $r->getProjectsStatusId(); 
    }
                
    if(strlen($r->getProjectsTypeId())>0)
    {
      $f['ProjectsTypes'] = $r->getProjectsTypeId(); 
    }
    
    if(strlen($r->getProjectsGroupsId())>0)
    {
      $f['ProjectsGroups'] = $r->getProjectsGroupsId(); 
    }
    
    return $f;
  }
  
  public static function getDefaultFilter($request,$sf_user)
  {
    if((int)$request->getParameter('projects_id')>0)
    {
      $report_type = 'filter' . $request->getParameter('projects_id');
    }
    else
    {
      $report_type = 'filter';
    }
    
    $r = Doctrine_Core::getTable('DiscussionsReports')
                ->createQuery()
                ->addWhere('is_default=?',1)
                ->addWhere('report_type=?',$report_type)
                ->addWhere('users_id=?',$sf_user->getAttribute('id'))
                ->fetchOne();
    if($r)
    {
      $request->setParameter('user_filter',$r->getId());
      return Discussions::useDiscussionsFilter($request,$sf_user);
    }
    else
    {
      $f = array();
      
      if(count($s=app::getStatusByGroup('open','DiscussionsStatus'))>0)
      {
        $f['DiscussionsStatus'] = implode(',',$s);
      }
                  
      return $f;
    }
  }
  
  public static function  getProgressChoices()
  {
    $c = array(''=>'');      
            
    for($i=5;$i<=100;$i+=5)
    {
      $c[$i]=$i . '%';
    }
    
    return $c;
  }
  
  public static function  getListingOrderByType($q,$type)
  {
   switch($type)
   {
     case 'projects':             $q->orderBy(' LTRIM(p.name), ds.status_group desc, ds.sort_order,LTRIM(ds.name), LTRIM(d.name)');
       break;
     case 'date_added':           $q->orderBy('d.created_at desc');
       break;
     case 'date_last_commented':  $q->orderBy('d.last_comment_date desc');
       break;
     case 'name':                 $q->orderBy('LTRIM(d.name)');
       break;
     case 'priority':             $q->orderBy(' dp.sort_order,LTRIM(dp.name),  LTRIM(p.name), LTRIM(d.name)');
       break;
     case 'status':               $q->orderBy(' ds.status_group desc, ds.sort_order,LTRIM(ds.name), LTRIM(p.name), LTRIM(d.name)');
       break;
     case 'type':                 $q->orderBy('dt.sort_order,LTRIM(dt.name), LTRIM(p.name), LTRIM(d.name)');
       break;
     case 'group':                $q->orderBy('dg.sort_order,LTRIM(dg.name), LTRIM(p.name), LTRIM(d.name)');
       break;
     default:                     $q->orderBy(' ds.status_group desc, ds.sort_order,LTRIM(ds.name), LTRIM(p.name), LTRIM(d.name)');
      break;            
   }
   
   return $q;
  }
}