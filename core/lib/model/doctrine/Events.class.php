<?php

/**
 * Events
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Events extends BaseEvents
{
  public static function getEventsListByDateQuery($timestamp, $users_id = null)
  {
    $date = date('Y-m-d',$timestamp);
    if($users_id==null)
    {
      return Events::get_events($date,$date,'public','null');
    }
    else
    {
      return Events::get_events($date,$date,'personal',$users_id);
    }
  }
  
  public static function get_events($date_from, $date_to,$calendar_type,$users_id='null')
  {
    global $app_user;
    
    $list = array();
    
    
    $where_sql = " where ( (date_format(start_date,'%Y-%m-%d')>='" . $date_from . "' and  date_format(end_date,'%Y-%m-%d')<='" . $date_to . "') or 
                           (date_format(start_date,'%Y-%m-%d')<'" . $date_from . "' and  date_format(end_date,'%Y-%m-%d')>'" . $date_to . "') or
                           (date_format(start_date,'%Y-%m-%d')<'" . $date_from . "' and  date_format(end_date,'%Y-%m-%d')<='" . $date_to . "' and  date_format(end_date,'%Y-%m-%d')>='" . $date_from . "') or
                           (date_format(start_date,'%Y-%m-%d')>='" . $date_from . "' and date_format(start_date,'%Y-%m-%d')<='" . $date_to . "' and  date_format(end_date,'%Y-%m-%d')>'" . $date_to . "') 
                           ) ";
    
    switch($calendar_type)
    {
      case 'personal':
          $where_sql .= " and users_id='" . $users_id . "' "; 
        break;
      case 'public':
          $where_sql .= " and (users_id is null or public_status=1)"; 
        break;
    }
    
    $events_query = "select * from events " . $where_sql . " order by start_date";
    
    //echo $events_query;  
      
    $connection = Doctrine_Manager::connection();  
    $statement = $connection->execute($events_query);        
    $events_list = $statement->fetchAll(PDO::FETCH_ASSOC);
                 
    
    foreach($events_list as $events)
    {
      $list[] = $events; 
    }
    
    if(count($repeat_events_list = Events::get_repeat_events($date_to,$calendar_type,$users_id,$date_from)))
    {
      $list = array_merge($list,$repeat_events_list);
    }
    
    //fix reccuring evetns for current day
    if($date_from==$date_to)
    {
      $list_tmp = $list;
      $list = array();
      
      foreach($list_tmp as $v)
      {
        if(app::getDateTimestamp($v['start_date'])<=app::getDateTimestamp($date_from) and app::getDateTimestamp($v['end_date'])>=app::getDateTimestamp($date_to))
        {
          $list[] = $v;
        }
      }
      
      
    }    
    
    return $list;
  }
  
  public static function get_repeat_events($date_to,$calendar_type,$users_id,$date_from)
  {
    global $app_user;
    
    //convert date to timestamp
    $date_to_timestamp = app::getDateTimestamp($date_to);
            
    $list = array();
    
    switch($calendar_type)
    {
      case 'personal':
          $where_sql = " and  users_id='" . $users_id. "' "; 
        break;
      case 'public':
          $where_sql .= " and users_id is null "; 
        break;
    }
    
    //get all events that already started (start_date<=date_to)      
    $events_query = "select * from events where length(repeat_type)>0 and date_format(start_date,'%Y-%m-%d')<='" . $date_to . "'" . $where_sql;
    
    $connection = Doctrine_Manager::connection();  
    $statement = $connection->execute($events_query);        
    $events_list = $statement->fetchAll(PDO::FETCH_ASSOC);
    
    foreach($events_list as $events)
    {
      $start_date = app::getDateTimestamp($events['start_date']);
      
      //set repeat end      
      $repeat_end = false;
      if(strlen($events['repeat_end'])>0)
      {
        $repeat_end = app::getDateTimestamp($events['repeat_end']);
        
        if($repeat_end<time()) continue;
      } 
                  
      //get repeat events by type                       
      switch($events['repeat_type'])
      {
        case 'daily': 
            //check repeat events day bay day       
            for($date = $start_date; $date<=$date_to_timestamp; $date+=86400)            
            {
              if($date>$start_date)
              {
                $dif = round(abs($date-$start_date)/86400);
                
                if($dif>0)
                {  
                  $event_obj = $events;                                                
                  $event_obj['start_date'] = date('Y-m-d H:i:s',strtotime('+' . $dif . ' day',app::getDateTimestamp($event_obj['start_date'])));                                                          
                  $event_obj['end_date'] = date('Y-m-d H:i:s',strtotime('+' . $dif . ' day',app::getDateTimestamp($event_obj['end_date'])));
                                          
                  if(Events::check_repeat_event_dif($dif,$event_obj,$repeat_end))
                  {                
                    $list[] = $event_obj;                
                  }
                }
              }
            }                                                          
          break;
        case 'weekly':  
            //check repeat events day bay day    
            for($date = $start_date; $date<=$date_to_timestamp; $date+=86400)            
            {
              if($date>$start_date)
              {
                //find days dif
                $dif = round(abs($date-$start_date)/86400);
                //find week dif
                $week_dif = Events::weeks_dif($start_date, $date);
                
                if($dif>0 and (in_array(date('N',$date),explode(',',$events['repeat_days']))))
                {  
                  $event_obj = $events;                                                
                  $event_obj['start_date'] = date('Y-m-d H:i:s',strtotime('+' . $dif . ' day',app::getDateTimestamp($event_obj['start_date'])));                                                          
                  $event_obj['end_date'] = date('Y-m-d H:i:s',strtotime('+' . $dif . ' day',app::getDateTimestamp($event_obj['end_date'])));
                                          
                  if(Events::check_repeat_event_dif($week_dif,$event_obj,$repeat_end))
                  {                
                    $list[] = $event_obj;                
                  }
                }
              }
            }                       
                                                                                  
          break;            
        case 'monthly':                        
            /**
             *in calendar we display 3 month in one view
             *so we have to check difference for each month
             */
             
            
            
             //check 1                                      
            $date_to_timestamp2 = strtotime('-2 month',$date_to_timestamp);
            
            $dif =  Events::months_dif($start_date, $date_to_timestamp2);
                          
            if($dif>0)
            {  
              $event_obj = $events;                                                
              $event_obj['start_date'] = date('Y-m-d H:i:s',strtotime('+' . $dif . ' month',app::getDateTimestamp($event_obj['start_date'])));                                                          
              $event_obj['end_date'] = date('Y-m-d H:i:s',strtotime('+' . $dif . ' month',app::getDateTimestamp($event_obj['end_date'])));
                                      
              if(Events::check_repeat_event_dif($dif,$event_obj,$repeat_end))
              {                
                $list[] = $event_obj;                
              }
            }
            
            //check 2
            $date_to_timestamp1 = strtotime('-1 month',$date_to_timestamp);
            
            $dif =  Events::months_dif($start_date, $date_to_timestamp1);
                          
            if($dif>0)
            {  
              $event_obj = $events;                                                
              $event_obj['start_date'] = date('Y-m-d H:i:s',strtotime('+' . $dif . ' month',app::getDateTimestamp($event_obj['start_date'])));                                                          
              $event_obj['end_date'] = date('Y-m-d H:i:s',strtotime('+' . $dif . ' month',app::getDateTimestamp($event_obj['end_date'])));
                                      
              if(Events::check_repeat_event_dif($dif,$event_obj,$repeat_end))
              {                
                $list[] = $event_obj;                
              }
            }
            
            
            
            //check 3
            $dif =  Events::months_dif($start_date, $date_to_timestamp);
                          
            if($dif>0)
            {     
              $event_obj = $events;                                             
              $event_obj['start_date'] = date('Y-m-d H:i:s',strtotime('+' . $dif . ' month',app::getDateTimestamp($event_obj['start_date'])));                                                          
              $event_obj['end_date'] = date('Y-m-d H:i:s',strtotime('+' . $dif . ' month',app::getDateTimestamp($event_obj['end_date'])));
                                      
              if(Events::check_repeat_event_dif($dif,$event_obj,$repeat_end))
              {                                
                $list[] = $event_obj;
              }
            }
                        
          break;
        case 'yearly':                        
            $dif =  date('Y',$date_to_timestamp)-date('Y',$start_date);
            
            if($dif>0)
            {             
              $events['start_date'] = date('Y-m-d H:i:s',strtotime('+' . $dif . ' year',app::getDateTimestamp($events['start_date'])));                                                          
              $events['end_date'] = date('Y-m-d H:i:s',strtotime('+' . $dif . ' year',app::getDateTimestamp($events['end_date'])));
                                      
              if(Events::check_repeat_event_dif($dif,$events,$repeat_end))
              {
                $list[] = $events;
              }
            }                                                                                               
          break;
      }            
                            
    }
    
    //echo '<pre>';
    //print_r($list);
    
    return $list;
    
  }
  
  static public function check_repeat_event_dif($dif,$events,$repeat_end)
  {
    $check = true;
        
    if($dif>0)
    {
      //check interval
      if($dif/$events['repeat_interval']!=floor($dif/$events['repeat_interval'])) $check=false;            
      
      //check repeat limit
      if($events['repeat_limit']>0)            
      if(floor($dif/$events['repeat_interval'])>$events['repeat_limit']) $check=false;
    }
    else
    {
      $check=false; 
    } 
    
    //check repeat end date            
    if($repeat_end>0)
    {
      
      if($repeat_end<app::getDateTimestamp($events['start_date']))
      {         
         $check=false;
      }
    }
    
    return $check;
  } 
  
  public static function weeks_dif($start, $end)
  {
    $year_start = date('Y',$start);
    $year_end = date('Y',$end);
    
    $week_start = date('W',$start); 
    $week_end = date('W',$end);
    
    $dif_years = $year_end - $year_start;
    $dif_weeks = $week_end - $week_start;
    
    if($dif_years==0 and $dif_weeks==0)
    {
      return 0;
    }
    elseif($dif_years==0 and $dif_weeks>0)
    {
      return $dif_weeks;
    }
    elseif($dif_years==1)
    {
      return (42-$week_start)+$week_end;
    }
    elseif($dif_years>1)
    {
      return (42-$week_start)+$week_end+(($dif_years-2)*42);
    }
  
    
  }
  
  public static function months_dif($start, $end)
  {
    // Assume YYYY-mm-dd - as is common MYSQL format
    $splitStart = explode('-', date('Y-n',$start));
    $splitEnd = explode('-', date('Y-n',$end));
          
    if (is_array($splitStart) && is_array($splitEnd)) 
    {
        $startYear = $splitStart[0];
        $startMonth = $splitStart[1];
        $endYear = $splitEnd[0];
        $endMonth = $splitEnd[1];
  
        $difYears = $endYear - $startYear;
        $difMonth = $endMonth - $startMonth;
  
        if (0 == $difYears && 0 == $difMonth) 
        { // month and year are same
            return 0;
        }
        else if (0 == $difYears && $difMonth > 0) 
        { // same year, dif months
            return $difMonth;
        }
        else if (1 == $difYears) 
        {
            $startToEnd = 13 - $startMonth; // months remaining in start year(13 to include final month
            return ($startToEnd + $endMonth); // above + end month date
        }
        else if ($difYears > 1) 
        {
            $startToEnd = 13 - $startMonth; // months remaining in start year 
            $yearsRemaing = $difYears - 2;  // minus the years of the start and the end year
            $remainingMonths = 12 * $yearsRemaing; // tally up remaining months
            $totalMonths = $startToEnd + $remainingMonths + $endMonth; // Monthsleft + full years in between + months of last year
            return $totalMonths;
        }
    }
    else 
    {
      return false;
    }
  }    

  
  
  public static function sendReminder()
  {
    $timestamp = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
    
    $users = Doctrine_Core::getTable('Users')->createQuery('u')->leftJoin('u.UsersGroups ug')->execute();
    foreach($users as $u)
    {
      if($u->getCulture())
      {
        sfContext::getInstance()->getI18N()->setCulture($u->getCulture());
      }
      
      //get public events
      if(strlen($u->getUsersGroups()->getAllowManagePublicScheduler())>0)
      if(strlen($events_list = Events::getReminderEventsListByDate($timestamp,null, $u))>0)
      {
        $body =  $events_list . '<a href="' . genBatchUrl('scheduler/index') . '">' . t::__('Scheduler') . '</a>';
        $body = '<div style="font-family: Arial; font-size: 13px; color: #000;">' . $body . '</div>';
        $subject = t::__('Reminder') . ': ' . t::__('Scheduler');
        $from = array(sfConfig::get('app_administrator_email')=>sfConfig::get('app_app_name'));
        $to = array($u->getEmail()=>$u->getName());
        
        Users::sendEmail($from, $to, $subject, $body);
      }
      
      //get public events
      if(strlen($u->getUsersGroups()->getAllowManagePersonalScheduler())>0)
      if(strlen($events_list = Events::getReminderEventsListByDate($timestamp,$u->getId(), $u))>0)
      {
        $body =  $events_list . '<a href="' . genBatchUrl('scheduler/personal') . '">' . t::__('My Scheduler') . '</a>';
        $body = '<div style="font-family: Arial; font-size: 13px; color: #000;">' . $body . '</div>';
        $subject = t::__('Reminder') . ': ' . t::__('My Scheduler');
        $from = array(sfConfig::get('app_administrator_email')=>sfConfig::get('app_app_name'));
        $to = array($u->getEmail()=>$u->getName());

        Users::sendEmail($from, $to, $subject, $body);
      }
      
    }
  }
  
  public static function getReminderEventsListByDate($timestamp, $users_id = null, $user)
  {
    $html = '';

    foreach(Events::getEventsListByDateQuery($timestamp,$users_id) as $events)
    {
      $edit_action = '';

      $event_name =  $events['event_name'];

      $time = date('H:i',app::getDateTimestamp($events['start_date']));

      if($time!='00:00')
      {
        $event_name = $time . ' ' . $event_name;
      }

      if($events['events_priority_id']>0)
      {
        $event_name =  app::getNameByTableId('EventsPriority',$events['events_priority_id']). ': ' . $event_name;
      }

      if($events['events_types_id']>0)
      {
        $event_name = $event_name . ' [' . app::getNameByTableId('EventsTypes',$events['events_types_id']) . ']';
      }

      $html .= '<li>'  .  $event_name . '</li>';

    }
    
    if(strlen($html)>0)
    {
      $html = '<ul>' . $html . '</ul>';
    }

    return $html;
  }
    
  public static function getCountTodaysEvents($users_id = null)
  {             
    if(isset($users_id))
    {       
      return count(self::get_events(date('Y-m-d'),date('Y-m-d'),'personal',$users_id));           
    }
    else
    {      
      return count(self::get_events(date('Y-m-d'),date('Y-m-d'),'public'));      
    }    
  }
  
  public static function weeksDif($start, $end)
  {
    $year_start = date('Y',$start);
    $year_end = date('Y',$end);
    
    $week_start = date('W',$start); 
    $week_end = date('W',$end);
    
    $dif_years = $year_end - $year_start;
    $dif_weeks = $week_end - $week_start;
    
    if($dif_years==0 and $dif_weeks==0)
    {
      return 0;
    }
    elseif($dif_years==0 and $dif_weeks>0)
    {
      return $dif_weeks;
    }
    elseif($dif_years==1)
    {
      return (42-$week_start)+$week_end;
    }
    elseif($dif_years>1)
    {
      return (42-$week_start)+$week_end+(($dif_years-2)*42);
    }
  
    
  }
  
  public static function monthsDif($start, $end)
  {
    // Assume YYYY-mm-dd - as is common MYSQL format
    $splitStart = explode('-', date('Y-n',$start));
    $splitEnd = explode('-', date('Y-n',$end));
  
    if (is_array($splitStart) && is_array($splitEnd)) 
    {
        $startYear = $splitStart[0];
        $startMonth = $splitStart[1];
        $endYear = $splitEnd[0];
        $endMonth = $splitEnd[1];
  
        $difYears = $endYear - $startYear;
        $difMonth = $endMonth - $startMonth;
  
        if (0 == $difYears && 0 == $difMonth) 
        { // month and year are same
            return 0;
        }
        else if (0 == $difYears && $difMonth > 0) 
        { // same year, dif months
            return $difMonth;
        }
        else if (1 == $difYears) 
        {
            $startToEnd = 13 - $startMonth; // months remaining in start year(13 to include final month
            return ($startToEnd + $endMonth); // above + end month date
        }
        else if ($difYears > 1) 
        {
            $startToEnd = 13 - $startMonth; // months remaining in start year 
            $yearsRemaing = $difYears - 2;  // minus the years of the start and the end year
            $remainingMonths = 12 * $yearsRemaing; // tally up remaining months
            $totalMonths = $startToEnd + $remainingMonths + $endMonth; // Monthsleft + full years in between + months of last year
            return $totalMonths;
        }
    }
    else 
    {
      return false;
    }
  }
}